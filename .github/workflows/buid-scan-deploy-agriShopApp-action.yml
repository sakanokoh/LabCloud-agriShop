name: Build and Deploy Flask App (argi-shop)

on:
  push:
    branches:
      - main1

jobs:
  # Job pour construire et pousser l'image Docker
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-agriapp:v1 .
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-agriapp:v1

  # Job pour scanner l'image Docker avec Trivy
  scan:
    runs-on: ubuntu-latest
    needs: build  # Ce job dépend du job "build"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          sudo apt-get install -y wget
          TRIVY_VERSION=0.43.0
          wget "https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.deb"
          sudo dpkg -i "trivy_${TRIVY_VERSION}_Linux-64bit.deb"
          rm "trivy_${TRIVY_VERSION}_Linux-64bit.deb"

      - name: Security scan with Trivy
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ secrets.DOCKER_USERNAME }}/flask-agriapp:v1

      - name: Fail if vulnerabilities found
        run: |
          if [ $? -ne 0 ]; then
            echo "Vulnerabilities found!";
            exit 1;
          fi

  # Job pour déployer l'application sur Azure
  deploy:
    runs-on: ubuntu-latest
    needs: scan  # Ce job dépend du job "scan"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Azure
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} \
                      -p ${{ secrets.AZURE_CLIENT_SECRET }} \
                      --tenant ${{ secrets.AZURE_TENANT_ID }}
            az containerapp create \
              --name flask-agriapp \
              --resource-group flask-agriapp-rg \
              --environment agriapp-env \
              --image ${{ secrets.DOCKER_USERNAME }}/flask-agriapp:v1 \
              --target-port 5000 \
              --ingress external \
              --cpu 0.5 --memory 1.0Gi
